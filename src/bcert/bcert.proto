# BCPKI - BlockchainPKI
# Copyright (C) 2013 timo.hanke@web.de, ilja@quantumlah
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

package bcert;

message BitcoinCertSignature {
  message SignatureAlgorithm {
    enum SignatureAlgorithmType {
      BCPKI = 1;
      PKCS1SHA1 = 2;
    }
    required SignatureAlgorithmType type = 1;
    optional string version = 2;
  }
  required SignatureAlgorithm algorithm = 1;
  optional bytes value = 2; 
}

message BitcoinCertData {
  message Validity {
    message Date {
      enum DateType {
        TIMESTAMP = 1;
        BLOCKNUMBER = 2;
      }
      required DateType type = 1;
      required int64 value = 2;
    }
    optional Date notbefore = 1;
    optional Date notafter = 2;
  }
  message Contact {
    enum Type {
      EMAIL = 1;
      URL = 2;
      PHONE = 3;
      POSTALADDR = 4;
      IRC = 5;
      }
    required Type type = 1;
    required string value = 2;
  }
  message PublicKey {
    enum Usage {
      PAYMENT = 1; 	     
      DERIVE = 2;
      SSLTLS = 3;
      ORDER = 4;
      CUSTOMERRELATION = 5;
    }
    message Algorithm {
      enum Type {
        P2CSINGLE = 1;
        P2CMULTI = 2;
        P2CSCRIPT = 3;
	STATIC_BTCADDR = 4;
        PKCS1 = 100;
      }
      required Type type = 1;
      optional string version = 2;
    }
    optional Usage usage = 1;
    required Algorithm algorithm = 2;
    repeated bytes value = 3;
  }
  required string version = 1;
  optional string subjectname = 2;
  optional Validity validity = 3;
  repeated Contact contacts = 4;
  repeated PublicKey paymentkeys = 5;
  repeated PublicKey derivationkeys = 6;
  repeated PublicKey otherusagekeys = 7;
}

message BitcoinCert {
  optional string version = 1;
  required BitcoinCertData data = 2;
  repeated BitcoinCertSignature signatures = 3;
}
